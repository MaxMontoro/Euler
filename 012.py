'''
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

'''
TODO:
1. add recursive solution with memoization
2. 
'''

from itertools import count
from math import sqrt

def generate_triangle_number(n):
    return sum(range(n+1))

def generate_triangle_number_gauss(n):
    return (n*(n+1))//2

memo = {1:1}
def get_number_of_divisors_with_memo(n):
    if n ==1:
        return 1
    divisors = 0
    if n in memo: return memo[n]
    for i in range(int(sqrt(n)), 0, -1):
        if n % i == 0:
            divisors += 2
    memo[n] = divisors
    return divisors


def get_number_of_divisors(n):
    if n ==1:
        return 1
    divisors = 0
    for i in range(1,int(sqrt(n))):
        if n % i == 0:
            divisors += 2
    return divisors

def get_triangle_with_divisors_over(n):
    for i in count(1):
        ith_triangle = generate_triangle_number(i)
        if get_number_of_divisors(ith_triangle) > n:
            return ith_triangle
            break

def get_triangle_with_divisors_over_gauss(n):
    for i in count(1):
        ith_triangle = generate_triangle_number_gauss(i)
        if get_number_of_divisors(ith_triangle) > n:
            return ith_triangle
            break

def get_triangle_with_divisors_over_n_with_gauss_memo(n):
    for i in count(1):
        ith_triangle = generate_triangle_number_gauss(i)
        if get_number_of_divisors_with_memo(ith_triangle) > n:
            return ith_triangle
        
'''
It can be done with prime factorization almost as quickly as with memoization
'''        

def get_triangle_with_divisors_over_n_with_factorization(n):
    for i in count(1):
        ith_triangle = generate_triangle_number_gauss(i)
        if get_factors(ith_triangle) > n:
            return ith_triangle

def get_factors(n):
    return sum(2 for i in range(1, round(sqrt(n)+1)) if not n % i)


# print(get_triangle_with_divisors_over_n_with_factorization(500))
        
#print(get_triangle_with_divisors_over_n_with_gauss_memo(100))

if __name__ == '__main__':
    import timeit
    #print(timeit.timeit("get_triangle_with_divisors_over(100)", setup="from __main__ import get_triangle_with_divisors_over", number=100))
    #print(timeit.timeit("get_triangle_with_divisors_over_gauss(100)", setup="from __main__ import get_triangle_with_divisors_over_gauss", number=100))
    #print(timeit.timeit("get_triangle_with_divisors_over_n_with_gauss_memo(500)", setup="from __main__ import get_triangle_with_divisors_over_n_with_gauss_memo", number=1))