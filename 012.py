'''
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
from itertools import count
from math import sqrt


def generate_triangle_number(n):
    return sum(range(n+1))

def get_number_of_divisors(n):
    if n ==1:
        return 1
    divisors = 0
    for i in range(1, int(sqrt(n))):
        if n % i == 0:
            divisors += 2
    return divisors

def get_triangle_with_divisors_over(n):
    for i in count(1):
        ith_triangle = generate_triangle_number(i)
        if get_number_of_divisors(ith_triangle) > n:
            print(ith_triangle)
            return ith_triangle
            break
        
get_triangle_with_divisors_over(500)

if __name__ == '__main__':
    import timeit
    print(timeit.timeit("get_triangle_with_divisors_over(500)", setup="from __main__ import get_triangle_with_divisors_over", number=1))